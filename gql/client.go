// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gql

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type ConstellationsGraphqlClient interface {
	LatestCollections(ctx context.Context, offset int, limit int, interceptors ...clientv2.RequestInterceptor) (*LatestCollections, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) ConstellationsGraphqlClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type LatestCollections_Collections_Collections struct {
	CollectionAddr string  "json:\"collectionAddr\" graphql:\"collectionAddr\""
	Name           string  "json:\"name\" graphql:\"name\""
	Image          string  "json:\"image\" graphql:\"image\""
	Description    string  "json:\"description\" graphql:\"description\""
	MintedAt       *string "json:\"mintedAt,omitempty\" graphql:\"mintedAt\""
}

func (t *LatestCollections_Collections_Collections) GetCollectionAddr() string {
	if t == nil {
		t = &LatestCollections_Collections_Collections{}
	}
	return t.CollectionAddr
}
func (t *LatestCollections_Collections_Collections) GetName() string {
	if t == nil {
		t = &LatestCollections_Collections_Collections{}
	}
	return t.Name
}
func (t *LatestCollections_Collections_Collections) GetImage() string {
	if t == nil {
		t = &LatestCollections_Collections_Collections{}
	}
	return t.Image
}
func (t *LatestCollections_Collections_Collections) GetDescription() string {
	if t == nil {
		t = &LatestCollections_Collections_Collections{}
	}
	return t.Description
}
func (t *LatestCollections_Collections_Collections) GetMintedAt() *string {
	if t == nil {
		t = &LatestCollections_Collections_Collections{}
	}
	return t.MintedAt
}

type LatestCollections_Collections struct {
	Collections []*LatestCollections_Collections_Collections "json:\"collections\" graphql:\"collections\""
}

func (t *LatestCollections_Collections) GetCollections() []*LatestCollections_Collections_Collections {
	if t == nil {
		t = &LatestCollections_Collections{}
	}
	return t.Collections
}

type LatestCollections struct {
	Collections LatestCollections_Collections "json:\"collections\" graphql:\"collections\""
}

func (t *LatestCollections) GetCollections() *LatestCollections_Collections {
	if t == nil {
		t = &LatestCollections{}
	}
	return &t.Collections
}

const LatestCollectionsDocument = `query LatestCollections ($offset: Int!, $limit: Int!) {
	collections(offset: $offset, limit: $limit, sortBy: MINTED_AT_DESC) {
		collections {
			collectionAddr
			name
			image
			description
			mintedAt
		}
	}
}
`

func (c *Client) LatestCollections(ctx context.Context, offset int, limit int, interceptors ...clientv2.RequestInterceptor) (*LatestCollections, error) {
	vars := map[string]any{
		"offset": offset,
		"limit":  limit,
	}

	var res LatestCollections
	if err := c.Client.Post(ctx, "LatestCollections", LatestCollectionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	LatestCollectionsDocument: "LatestCollections",
}
